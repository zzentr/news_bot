from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from asyncio import run
from asyncio import to_thread
import aiohttp
from datetime import datetime, timedelta
from random import choice
from dotenv import load_dotenv
import os
load_dotenv()


bot = Bot(os.getenv('TOKEN'))
dp = Dispatcher()
scheduler = AsyncIOScheduler()
users_jobs = {}

class Interval(StatesGroup):

    interval = State()


@dp.message(Command('start'))
async def cmd_start(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='1 —á–∞—Å', callback_data='hour_1'),
                                                InlineKeyboardButton(text='3 —á–∞—Å–∞', callback_data='hour_3'),
                                                InlineKeyboardButton(text='5 —á–∞—Å–æ–≤', callback_data='hour_5')],
                                              [InlineKeyboardButton(text='–ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª', 
                                                                    callback_data='new_interval')]])
    await message.answer('–ø—Ä–∏–≤–µ—Ç, —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –º–∏—Ä–∞ —á—Ç–æ–±—ã –≤—ã –≤—Å–µ–≥–¥–∞ –±—ã–ª–∏ –≤ –∫—É—Ä—Å–µ –¥–µ–ª.\n\n'
                         '–≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∞—Å–∞—Ö —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ!', 
                         reply_markup=keyboard)

async def send_news(tg_id):
    try:
        async with aiohttp.ClientSession() as session:
            headers = {'X-Api-Key': os.getenv('NEWS_API')}
            from_time = datetime.now() - timedelta(days=2)

            async with session.get(url=f'https://newsapi.org/v2/everything?q=–Ω–æ–≤–æ—Å—Ç–∏&language=ru&pageSize=1&from={from_time}',
                                    headers=headers, ssl=False) as response:
                
                if response.ok:
                    data = await response.json()
                    news = data['articles'][0]
                    emoji = choice(['‚ùóÔ∏è', '‚ùì', '‚ö†Ô∏è', 'üî•'])
                    await bot.send_message(chat_id=tg_id, text=f'{emoji} <b>{news['title']}</b> {emoji}\n\n{news['description']}\n\n{news['url']}', 
                                        parse_mode='html')
                    
                else:
                    await bot.send_message(chat_id=tg_id, text='–∏–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —Å–µ—Ä–≤–∏—Å —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç')

    except Exception as e:
        print(f'Error: {e}')
        await bot.send_message(chat_id=tg_id, text='–∏–∑–≤–∏–Ω–∏—Ç–µ, —É –Ω–∞—Å –Ω–µ–±–æ–ª—å—à–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏, —Å–∫–æ—Ä–æ –≤—Å–µ –ø–æ—á–∏–Ω–∏–º!')

@dp.message(Command('interval'))
async def new_interval(message: Message, state: FSMContext):
    await state.set_state(Interval.interval)
    await message.answer('–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª')

@dp.message(Interval.interval)
async def set_another_interval(message: Message, state: FSMContext):
    interval = message.text

    try:
        interval = int(interval)
    except ValueError:
        await message.answer('–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ')
        return
    
    await state.clear()
    await to_thread(set_interval_to_scheduler, message.from_user.id, interval)
    await message.answer('—Å–ø–∞—Å–∏–±–æ, —Ç–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π —Ä–∞–∑ –∫–æ–≥–¥–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç —ç—Ç–æ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ '
                        '—è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ–≤–æ—Å—Ç—å!')
    
@dp.message()
async def text(message: Message):
    await message.answer('–Ω–µ –ø–æ–Ω–∏–º–∞—é, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É!')

def set_interval_to_scheduler(tg_id: int, interval: int):
    if tg_id in users_jobs:
        scheduler.modify_job(users_jobs[tg_id], trigger=IntervalTrigger(hours=interval))
    else:
        job = scheduler.add_job(send_news, 'interval', hours=interval, args=[tg_id])
        users_jobs[tg_id] = job.id

async def main():
    scheduler.start() 
    from callbacks import router
    dp.include_routers(router)
    await dp.start_polling(bot)

if __name__ == '__main__':
    run(main())